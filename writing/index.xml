<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writings on Kevin Duggan</title>
    <link>https://kduggan.is/writing/</link>
    <description>Recent content in Writings on Kevin Duggan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Jun 2019 10:40:46 +0100</lastBuildDate>
    
	<atom:link href="https://kduggan.is/writing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Opening Night</title>
      <link>https://kduggan.is/writing/opening-night/</link>
      <pubDate>Sun, 23 Jun 2019 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/opening-night/</guid>
      <description>The year was 2004, the city was Canberra, Australia. The first international tour where I was male lead dancer, it was opening night. Big time!
The show was starting, the hum of the audience dying down as the curtain came up. I was standing offstage left. My warm up was good. Felt nervous but ready to go. The music started slowly. I gave a quick jump to keep blood moving. The main troupe started into their slow choreography on stage.</description>
    </item>
    
    <item>
      <title>3 Tips for Bootstrapping Your High Performance Team</title>
      <link>https://kduggan.is/writing/bootstrapping-high-performance-team/</link>
      <pubDate>Tue, 23 Apr 2019 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/bootstrapping-high-performance-team/</guid>
      <description>Building a new product team is tough. But what about the added pressure of knowing that they has to hit the ground running? How do you set you and your team up for success?
This blog post offers a few tips on how you to build that important momentum required to deliver both for the team and their users.
Photo by Ravi Roshan on Unsplash
##1 Get some great people I’m not saying everyone has to have crazy skills (though they can come in handy).</description>
    </item>
    
    <item>
      <title>Why Mob Programming? Here are 5 reasons…</title>
      <link>https://kduggan.is/writing/mob-programming/</link>
      <pubDate>Sat, 23 Mar 2019 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/mob-programming/</guid>
      <description>First, you developed on your own. Then you paired. Now comes mob programming. Mob programming is an approach where you get your team together around a single workstation to work through a task from beginning to end. Many minds, many perspectives, one keyboard. There is no cost, no expensive training needed. It is simple; it works.
There are three roles: one driver, one navigator, and one-to-many back seat passengers. Everyone rotates through all three roles.</description>
    </item>
    
    <item>
      <title>Zip It (in meetings)!</title>
      <link>https://kduggan.is/writing/zip-it/</link>
      <pubDate>Sun, 23 Dec 2018 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/zip-it/</guid>
      <description>Quick tip today. If you are a senior person in a meeting, answering lots of questions, offering loads of great advice, then try shutting up! You are talking too much and hurting other people more junior/introverted that you. Instead, show leadership by listening and empathising. This is the way forward. Sure, there is a time and a place for your knowledge and experience. But always giving advice, offering help and opinions, is short-termism.</description>
    </item>
    
    <item>
      <title>Continuous Delivery and THE FEAR</title>
      <link>https://kduggan.is/writing/continuous-delivery-and-the-fear/</link>
      <pubDate>Tue, 23 May 2017 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/continuous-delivery-and-the-fear/</guid>
      <description>Continuous Delivery (CD) is the ability to get changes of all types—including new features, configuration changes, bug fixes and experiments—into production, or into the hands of users, safely and quickly in a sustainable way.
 You want to go faster, so you invest months in building out a fully automated build pipeline. You modernise your architecture and adopt the latest agile process. And you achieve the dream of CD, with the ability to deploy features and bug fixes to production in seconds with zero downtime.</description>
    </item>
    
    <item>
      <title>Big Data Analytics with Apache Spark</title>
      <link>https://kduggan.is/writing/analytics-with-spark/</link>
      <pubDate>Wed, 02 Nov 2016 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/analytics-with-spark/</guid>
      <description>Over the past two years, my team has taken a new Cross-Channel Analytics Platform from proof of concept to production. Our customers publish hundreds of thousands of communications daily across a variety of different channels, generating an explosion of events on that content. Email opens, page views, video plays and social comments (to mention but a few) are all captured by our platform and we process them across multiple different metrics and dimensions to deliver insights and actionable reports and dashboards to our end users.</description>
    </item>
    
    <item>
      <title>Removing sleeps from your AngularJS Protractor tests</title>
      <link>https://kduggan.is/writing/removing-sleeps-from-protractor/</link>
      <pubDate>Wed, 06 Jul 2016 10:40:46 +0100</pubDate>
      
      <guid>https://kduggan.is/writing/removing-sleeps-from-protractor/</guid>
      <description>sleep() The Protractor framework does a great job of shielding you from the inherent difficulties of testing your asynchronous Angular app. Using ControlFlow it keeps the list of pending promises hence executing the test in a logical manner. However this is not always enough. Sometimes the tests outrun browser! In such cases you might just be tempted to put in a browser.sleep(2000) to allow everything to get back on track.</description>
    </item>
    
  </channel>
</rss>